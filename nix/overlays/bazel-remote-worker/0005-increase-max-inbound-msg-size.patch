commit 742e6702b601341de4d37f4249accf08158571fb
Author: Claudio Bley <claudio.bley@tweag.io>
Date:   Thu Feb 29 10:03:16 2024 +0100

    Increase max inbound message size for grpc server
    
    By default it is set to 4MiB, but despite the max batch size being set to 4MB, buck2 sometimes
    manages to send larger messages than 4MiB.
    
    Unfortunately, logging of warning messages for `io.grpc.netty` is disabled and
    such an exception is just not severe enough:
    
    ```
    240229 08:43:39.770:WT 17 [io.grpc.netty.NettyServerStream$TransportState.deframeFailed] Exception processing message
    io.grpc.StatusRuntimeException: RESOURCE_EXHAUSTED: gRPC message exceeds maximum size 4194304: 4594008
            at io.grpc.Status.asRuntimeException(Status.java:526)
            at io.grpc.internal.MessageDeframer.processHeader(MessageDeframer.java:391)
            at io.grpc.internal.MessageDeframer.deliver(MessageDeframer.java:271)
            at io.grpc.internal.MessageDeframer.request(MessageDeframer.java:161)
            at io.grpc.internal.AbstractStream$TransportState$1RequestRunnable.run(AbstractStream.java:236)
            at io.grpc.netty.NettyServerStream$TransportState$1.run(NettyServerStream.java:202)
            at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
            at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:469)
            at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:384)
            at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
            at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
            at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
            at java.base/java.lang.Thread.run(Thread.java:829)
    ```
    
    See https://github.com/facebook/buck2/issues/563
    
    Re-configure netty's logger to log warning messages and just filter out the confusing
    "Received DATA frame for an unknown stream" ones.
    
    Set the max inbound message size to an arbitrarily higher number to avoid this problem.

diff --git a/src/tools/remote/src/main/java/com/google/devtools/build/remote/worker/RemoteWorker.java b/src/tools/remote/src/main/java/com/google/devtools/build/remote/worker/RemoteWorker.java
index 54955ff5fd..06cea329cf 100644
--- a/src/tools/remote/src/main/java/com/google/devtools/build/remote/worker/RemoteWorker.java
+++ b/src/tools/remote/src/main/java/com/google/devtools/build/remote/worker/RemoteWorker.java
@@ -200,6 +200,7 @@ public final class RemoteWorker {
 
     NettyServerBuilder b =
         NettyServerBuilder.forPort(workerOptions.listenPort)
+            .maxInboundMessageSize(6000000)
             .addService(ServerInterceptors.intercept(actionCacheServer, interceptors))
             .addService(ServerInterceptors.intercept(bsServer, interceptors))
             .addService(ServerInterceptors.intercept(casServer, interceptors))
@@ -286,7 +287,8 @@ public final class RemoteWorker {
     // machine. The wording 'unknown stream' is misleading - the stream was previously known, but
     // was recently closed. I'm told upstream discussed this, but didn't want to keep information
     // about closed streams around.
-    nettyLogger.setLevel(Level.SEVERE);
+    nettyLogger.setLevel(Level.WARNING);
+    nettyLogger.setFilter(record -> !record.getMessage().contains("Received DATA frame for an unknown stream"));
 
     FileSystem fs = getFileSystem();
     Path sandboxPath = null;
