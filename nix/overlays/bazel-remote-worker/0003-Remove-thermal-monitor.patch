From a9aca91b28b200b9cb9b0ba3ab7bc3276f2437f3 Mon Sep 17 00:00:00 2001
From: Andreas Herrmann <andreas.herrmann@tweag.io>
Date: Fri, 26 Jan 2024 11:47:21 +0100
Subject: [PATCH] Remove thermal monitor

The required header is missing on x86_64 MacOS with Nixpkgs
and the code is unused.
---
 .../darwin/system_thermal_monitor_jni.cc      | 64 +------------------
 1 file changed, 1 insertion(+), 63 deletions(-)

diff --git a/src/main/native/darwin/system_thermal_monitor_jni.cc b/src/main/native/darwin/system_thermal_monitor_jni.cc
index baa6e21246..4ca1deb7d6 100644
--- a/src/main/native/darwin/system_thermal_monitor_jni.cc
+++ b/src/main/native/darwin/system_thermal_monitor_jni.cc
@@ -12,8 +12,6 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-#include <TargetConditionals.h>
-#include <libkern/OSThermalNotification.h>
 #include <notify.h>
 
 #include "src/main/cpp/util/logging.h"
@@ -25,70 +23,10 @@ namespace blaze_jni {
 static int gThermalNotifyToken = 0;
 
 static int thermal_load_from_token(int token) {
-  uint64_t state;
-  uint32_t status = notify_get_state(token, &state);
-  BAZEL_CHECK_EQ(status, NOTIFY_STATUS_OK);
-  OSThermalPressureLevel thermalLevel = (OSThermalPressureLevel)state;
-  int load = -1;
-  switch (thermalLevel) {
-    case kOSThermalPressureLevelNominal:
-      BAZEL_LOG(USER) << "thermal pressure nominal (0) anomaly";
-      load = 0;
-      break;
-
-    case kOSThermalPressureLevelModerate:
-      BAZEL_LOG(USER) << "thermal pressure moderate (33) anomaly ";
-      load = 33;
-      break;
-
-    case kOSThermalPressureLevelHeavy:
-      BAZEL_LOG(USER) << "thermal pressure heavy (50) anomaly";
-      load = 50;
-      break;
-
-    case kOSThermalPressureLevelTrapping:
-      BAZEL_LOG(USER) << "thermal pressure trapping (90) anomaly";
-      load = 90;
-      break;
-
-    case kOSThermalPressureLevelSleeping:
-      BAZEL_LOG(USER) << "thermal pressure sleeping (100) anomaly";
-      load = 100;
-      break;
-  }
-  if (load == -1) {
-    BAZEL_LOG(FATAL) << "unknown thermal pressure level: " << thermalLevel;
-  }
-
-  return load;
+  return 0;
 }
 
 void portable_start_thermal_monitoring() {
-  // To test use:
-  //   sudo thermal simulate cpu {nominal|moderate|heavy|trapping|sleeping}
-  // Note that we install the test notification as well that can be used for
-  // testing.
-  static dispatch_once_t once_token;
-  dispatch_once(&once_token, ^{
-    dispatch_queue_t queue = bazel::darwin::JniDispatchQueue();
-    notify_handler_t handler = (^(int token) {
-      int value = thermal_load_from_token(token);
-      thermal_callback(value);
-    });
-    int status =
-        notify_register_dispatch(kOSThermalNotificationPressureLevelName,
-                                 &gThermalNotifyToken, queue, handler);
-    BAZEL_CHECK_EQ(status, NOTIFY_STATUS_OK);
-
-    // This is registered solely so we can test the system from end-to-end.
-    // Using the Apple notification requires admin access.
-    int testToken;
-    status =
-        notify_register_dispatch("com.google.bazel.test.thermalpressurelevel",
-                                 &testToken, queue, handler);
-    BAZEL_CHECK_EQ(status, NOTIFY_STATUS_OK);
-    BAZEL_LOG(INFO) << "thermal monitoring registered";
-  });
 }
 
 int portable_thermal_load() {
-- 
2.34.1

